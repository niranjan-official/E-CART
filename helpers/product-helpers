var db = require('../config/connection')
var collection = require("../config/collections")
var objectId = require('mongodb').ObjectId
const bcrypt = require("bcrypt")

module.exports = {
    // dosignup: (adminData) => {
    //     return new Promise(async (resolve, reject) => {
    //         adminData.Password = await bcrypt.hash(adminData.Password, 10)
    //         db.get().collection(collection.ADMIN_COLLECTION).insertOne(adminData).then(() => {
    //             resolve(adminData)
    //         })

    //     })
    // },
    doLogin: (adminData) => {
        return new Promise(async (resolve, reject) => {
            let loginStatus = false
            let response = {}
            let admin = await db.get().collection(collection.ADMIN_COLLECTION).findOne({ Email: adminData.Email })
            if (admin) {
                bcrypt.compare(adminData.Password, admin.Password).then((status) => {
                    if (status) {
                        console.log("login success")
                        response.admin = admin
                        response.status = true
                        resolve(response)
                    } else {
                        console.log("login failed")
                        resolve({ status: false })
                    }
                })

            } else {
                console.log("login failed")
            }
        })
    },
    getOrder: () => {
        return new Promise(async (resolve, reject) => {
            db.get().collection(collection.ORDER_COLLECTION).find({ status: 'placed' }).toArray().then((response) => {
                resolve(response)
            })
        })
    },

    addProduct: (product, callback) => {

        db.get().collection('product').insertOne(product).then((data) => {
            callback(data.insertedId)

        })

    },
    getAllProducts: () => {
        return new Promise(async (resolve) => {
            let products = await db.get().collection(collection.PRODUCT_COLLECTION).find().toArray()
            resolve(products)
        })
    },
    deleteProduct: (proId) => {
        return new Promise((resolve) => {
            db.get().collection(collection.PRODUCT_COLLECTION).deleteOne({ _id: new objectId(proId) }).then((response) => {
                resolve(response)
            })
        })
    },
    getProductDetails: (proId) => {
        return new Promise((resolve, reject) => {
            db.get().collection(collection.PRODUCT_COLLECTION).findOne({ _id: new objectId(proId) }).then((product) => {
                resolve(product)
            })
        })
    },
    updateProduct: (proId, proDetails) => {
        return new Promise((resolve, reject) => {
            db.get().collection(collection.PRODUCT_COLLECTION).updateOne({ _id: new objectId(proId) }, {
                $set: {
                    Name: proDetails.Name,
                    Category: proDetails.Category,
                    Price: proDetails.Price,
                    Description: proDetails.Description
                }
            }).then((response) => {
                resolve(response)
            })
        })
    }
}